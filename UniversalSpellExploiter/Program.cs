#region

using System;
using LeagueSharp;
using LeagueSharp.Common;

#endregion

namespace UniversalSpellExploiter
{
    internal class Program
    {
        public static Menu Menu;
        public static Spell Spell;
        public static int LastSelected;
        public static Obj_AI_Base Target;
        public static readonly StringList SpellList = new StringList(new[] { "Q", "W", "E", "R" });
        public static float LastCast = 0;

        private static void Main(string[] args)
        {
            CustomEvents.Game.OnGameLoad += Game_OnGameLoad;
        }

        private static void Game_OnGameLoad(EventArgs args)
        {
            Spell = new Spell(SpellSlot.Q);

            Menu = new Menu("USE", "USE", true);
            Menu.AddItem(new MenuItem("Spell", "Spell").SetValue(SpellList));
            Menu.AddItem(new MenuItem("Key", "Key").SetValue(new KeyBind(32, KeyBindType.Press)));
            Menu.AddToMainMenu();

            LastSelected = Menu.Item("Spell").GetValue<StringList>().SelectedIndex;
            Spell.Slot = (SpellSlot) LastSelected;

            Game.OnGameSendPacket += Game_OnGameSendPacket;
            Game.OnGameUpdate += Game_OnGameUpdate;
        }

        private static void Game_OnGameUpdate(System.EventArgs args)
        {
            if (LastSelected != Menu.Item("Spell").GetValue<StringList>().SelectedIndex)
            {
                LastSelected = Menu.Item("Spell").GetValue<StringList>().SelectedIndex;
                Spell.Slot = (SpellSlot) LastSelected;
            }

            if (Menu.Item("Key").GetValue<KeyBind>().Active && !Target.IsDead && Spell.IsReady() &&
                Environment.TickCount - LastCast > 60)
            {
                Console.WriteLine("Cast");
                Spell.CastOnUnit(Target, true);
                LastCast = Environment.TickCount;
            }
        }

        private static void Game_OnGameSendPacket(GamePacketEventArgs args)
        {
            if (args.PacketData[0] != Packet.C2S.SetTarget.Header)
            {
                return;
            }

            var decoded = Packet.C2S.SetTarget.Decoded(args.PacketData);

            if (decoded.NetworkId != 0 && decoded.Unit.IsValid && !decoded.Unit.IsMe)
            {
                Console.WriteLine("Set Target: " + decoded.Unit.Name);
                Target = decoded.Unit;
            }
        }
    }
}